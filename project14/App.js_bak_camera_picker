/** @format */

import React from 'react';
import {
  AppRegistry,
  Image,
  PixelRatio,
  StyleSheet,
  Text,
  TouchableOpacity,
  View,
} from 'react-native';
import ImagePicker from 'react-native-image-picker';

import DateTimePicker from 'react-native-modal-datetime-picker';

export default class App extends React.Component {
  state = {
    avatarSource: null,
    videoSource: null,
    isDateTimePickerVisible: false,

    setTime : '01/01/0000 09:00:00',
    stHour : '09',
    stMin : '00',
    edHour : '18',
    edMin : '00',
    timeType : 'st'
  };

  constructor(props) {
    super(props);

    this.DateTimePicker = null;

    this.selectPhotoTapped = this.selectPhotoTapped.bind(this);
    this.selectPhotoTapped2 = this.selectPhotoTapped2.bind(this);
    
    this.selectVideoTapped = this.selectVideoTapped.bind(this);

    this.onPress = this._showDateTimePicker.bind(this);
  }

  selectPhotoTapped() {
    const options = {
      quality: 1.0,
      maxWidth: 500,
      maxHeight: 500,
      storageOptions: {
        skipBackup: true,
      },
    };

    ImagePicker.showImagePicker(options, (response) => {
      console.log('Response = ', response);

      if (response.didCancel) {
        console.log('User cancelled photo picker');
      } else if (response.error) {
        console.log('ImagePicker Error: ', response.error);
      } else if (response.customButton) {
        console.log('User tapped custom button: ', response.customButton);
      } else {
        let source = { uri: response.uri };

        // You can also display the image using data:
        // let source = { uri: 'data:image/jpeg;base64,' + response.data };

        this.setState({
          avatarSource: source,
        });
      }
    });
  }

  selectPhotoTapped2() {
    const options = {
      quality: 1.0,
      maxWidth: 500,
      maxHeight: 500,
      storageOptions: {
        skipBackup: true,
      },
    };


  ImagePicker.launchImageLibrary(options, (response) => {
    console.log('Response = ', response);

      if (response.didCancel) {
        console.log('User cancelled photo picker');
      } else if (response.error) {
        console.log('ImagePicker Error: ', response.error);
      } else if (response.customButton) {
        console.log('User tapped custom button: ', response.customButton);
      } else {
        let source = { uri: response.uri };

        // You can also display the image using data:
        // let source = { uri: 'data:image/jpeg;base64,' + response.data };

        this.setState({
          avatarSource: source,
        });
    }
  })};

  selectVideoTapped() {
    const options = {
      title: 'Video Picker',
      takePhotoButtonTitle: 'Take Video...',
      mediaType: 'video',
      videoQuality: 'medium',
    };

    ImagePicker.showImagePicker(options, (response) => {
      console.log('Response = ', response);

      if (response.didCancel) {
        console.log('User cancelled video picker');
      } else if (response.error) {
        console.log('ImagePicker Error: ', response.error);
      } else if (response.customButton) {
        console.log('User tapped custom button: ', response.customButton);
      } else {
        this.setState({
          videoSource: response.uri,
        });
      }
    });
  }

  _showDateTimePicker = (type) => () => {
    const {stHour, stMin, edHour, edMin} = this.state;
    if(type == 'st') {
      this.setState({ 
        isDateTimePickerVisible: true,
        setTime : `01/01/0000 ${stHour}:${stMin}:00`,
        timeType : type
      });
    } else {
      this.setState({ 
        isDateTimePickerVisible: true,
        setTime : `01/01/0000 ${edHour}:${edMin}:00`,
        timeType : type
      });
    }
  } 

  _hideDateTimePicker = () => this.setState({ isDateTimePickerVisible: false });


  _handleDatePicked = (date) => {
    console.log('A date has been picked: ', date);
    console.log(this.DateTimePicker.props.type);
    var d = new Date(date);

    if(this.DateTimePicker.props.type == 'st') {

      this.setState({ 
        stHour : this.pad(d.getHours(), 2),
        stMin : this.pad(d.getMinutes(), 2)
      });

    } else {
      this.setState({ 
        edHour : this.pad(d.getHours(), 2),
        edMin : this.pad(d.getMinutes(), 2)
      });
    }

   

    console.log(`${this.pad(d.getHours(), 2)}${this.pad(d.getMinutes(), 2)}`)

    this._hideDateTimePicker();
  };

  pad(n, width) {
    n = n + '';
    return n.length >= width ? n : new Array(width - n.length + 1).join('0') + n;
  }

  render() {
    return (
      <View style={styles.container}>
        <TouchableOpacity onPress={this.selectPhotoTapped.bind(this)}>
          <View
            style={[
              styles.avatar,
              styles.avatarContainer,
              { marginBottom: 20 },
            ]}
          >
            {this.state.avatarSource === null ? (
              <Text>Select a Photo</Text>
            ) : (
              <Image style={styles.avatar} source={this.state.avatarSource} />
            )}
          </View>
        </TouchableOpacity>

        <TouchableOpacity onPress={this.selectVideoTapped.bind(this)}>
          <View style={[styles.avatar, styles.avatarContainer]}>
            <Text>Select a Video</Text>
          </View>
        </TouchableOpacity>

        {this.state.videoSource && (
          <Text style={{ margin: 8, textAlign: 'center' }}>
            {this.state.videoSource}
          </Text>
        )}


        <TouchableOpacity onPress={this._showDateTimePicker('st')}>
          <View style={[styles.avatar, styles.avatarContainer]}>
            <Text>시작시간</Text>
            <Text>{`${this.state.stHour}:${this.state.stMin}`}</Text>
          </View>
        </TouchableOpacity>

        <TouchableOpacity onPress={this._showDateTimePicker('ed')}>
          <View style={[styles.avatar, styles.avatarContainer]}>
            <Text>종료시간</Text>
            <Text>{`${this.state.edHour}:${this.state.edMin}`}</Text>
          </View>
        </TouchableOpacity>

        <DateTimePicker
          isVisible={this.state.isDateTimePickerVisible}
          onConfirm={this._handleDatePicked}
          onCancel={this._hideDateTimePicker}
          mode='time'
          datePickerModeAndroid='spinner'
          is24Hour={true}
          date={ new Date(this.state.setTime) }
          type={this.state.timeType}
          ref={ref => {
            this.DateTimePicker = ref;
          }}
        />

      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F5FCFF',
  },
  avatarContainer: {
    borderColor: '#9B9B9B',
    borderWidth: 1 / PixelRatio.get(),
    justifyContent: 'center',
    alignItems: 'center',
  },
  avatar: {
    borderRadius: 75,
    width: 150,
    height: 150,
  },
});